{"remainingRequest":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\src\\views\\goods-manage\\goods-unit.vue?vue&type=template&id=2aebb4b8&scoped=true&","dependencies":[{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\src\\views\\goods-manage\\goods-unit.vue","mtime":1597567464680},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}