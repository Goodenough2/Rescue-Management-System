{"remainingRequest":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\src\\layout\\components\\Settings\\ThemePicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\src\\layout\\components\\Settings\\ThemePicker.vue","mtime":1593517268914},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQpjb25zdCB2ZXJzaW9uID0gcmVxdWlyZSgnZWxlbWVudC11aS9wYWNrYWdlLmpzb24nKS52ZXJzaW9uIC8vIGVsZW1lbnQtdWkgdmVyc2lvbiBmcm9tIG5vZGVfbW9kdWxlcw0KY29uc3QgT1JJR0lOQUxfVEhFTUUgPSAnIzQwOUVGRicgLy8gZGVmYXVsdCBjb2xvcg0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdUaGVtZVBpY2tlcicsDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGNoYWxrOiAnJywgLy8gY29udGVudCBvZiB0aGVtZS1jaGFsayBjc3MNCiAgICAgIHRoZW1lOiAnJw0KICAgIH0NCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICBkZWZhdWx0VGhlbWUoKSB7DQogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc2V0dGluZ3MudGhlbWUNCiAgICB9DQogIH0sDQogIHdhdGNoOiB7DQogICAgZGVmYXVsdFRoZW1lOiB7DQogICAgICBoYW5kbGVyOiBmdW5jdGlvbih2YWwsIG9sZFZhbCkgew0KICAgICAgICB0aGlzLnRoZW1lID0gdmFsDQogICAgICB9LA0KICAgICAgaW1tZWRpYXRlOiB0cnVlDQogICAgfSwNCiAgICBhc3luYyB0aGVtZSh2YWwpIHsNCiAgICAgIGNvbnN0IG9sZFZhbCA9IHRoaXMuY2hhbGsgPyB0aGlzLnRoZW1lIDogT1JJR0lOQUxfVEhFTUUNCiAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykgcmV0dXJuDQogICAgICBjb25zdCB0aGVtZUNsdXN0ZXIgPSB0aGlzLmdldFRoZW1lQ2x1c3Rlcih2YWwucmVwbGFjZSgnIycsICcnKSkNCiAgICAgIGNvbnN0IG9yaWdpbmFsQ2x1c3RlciA9IHRoaXMuZ2V0VGhlbWVDbHVzdGVyKG9sZFZhbC5yZXBsYWNlKCcjJywgJycpKQ0KICAgICAgY29uc29sZS5sb2codGhlbWVDbHVzdGVyLCBvcmlnaW5hbENsdXN0ZXIpDQoNCiAgICAgIGNvbnN0ICRtZXNzYWdlID0gdGhpcy4kbWVzc2FnZSh7DQogICAgICAgIG1lc3NhZ2U6ICcgIOW6lOeUqOminOiJsuiuvue9ruS4rS4uLicsDQogICAgICAgIGN1c3RvbUNsYXNzOiAndGhlbWUtbWVzc2FnZScsDQogICAgICAgIHR5cGU6ICdzdWNjZXNzJywNCiAgICAgICAgZHVyYXRpb246IDAsDQogICAgICAgIGljb25DbGFzczogJ2VsLWljb24tbG9hZGluZycNCiAgICAgIH0pDQoNCiAgICAgIGNvbnN0IGdldEhhbmRsZXIgPSAodmFyaWFibGUsIGlkKSA9PiB7DQogICAgICAgIHJldHVybiAoKSA9PiB7DQogICAgICAgICAgY29uc3Qgb3JpZ2luYWxDbHVzdGVyID0gdGhpcy5nZXRUaGVtZUNsdXN0ZXIoT1JJR0lOQUxfVEhFTUUucmVwbGFjZSgnIycsICcnKSkNCiAgICAgICAgICBjb25zdCBuZXdTdHlsZSA9IHRoaXMudXBkYXRlU3R5bGUodGhpc1t2YXJpYWJsZV0sIG9yaWdpbmFsQ2x1c3RlciwgdGhlbWVDbHVzdGVyKQ0KDQogICAgICAgICAgbGV0IHN0eWxlVGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpDQogICAgICAgICAgaWYgKCFzdHlsZVRhZykgew0KICAgICAgICAgICAgc3R5bGVUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpDQogICAgICAgICAgICBzdHlsZVRhZy5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpDQogICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlVGFnKQ0KICAgICAgICAgIH0NCiAgICAgICAgICBzdHlsZVRhZy5pbm5lclRleHQgPSBuZXdTdHlsZQ0KICAgICAgICB9DQogICAgICB9DQoNCiAgICAgIGlmICghdGhpcy5jaGFsaykgew0KICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly91bnBrZy5jb20vZWxlbWVudC11aUAke3ZlcnNpb259L2xpYi90aGVtZS1jaGFsay9pbmRleC5jc3NgDQogICAgICAgIGF3YWl0IHRoaXMuZ2V0Q1NTU3RyaW5nKHVybCwgJ2NoYWxrJykNCiAgICAgIH0NCg0KICAgICAgY29uc3QgY2hhbGtIYW5kbGVyID0gZ2V0SGFuZGxlcignY2hhbGsnLCAnY2hhbGstc3R5bGUnKQ0KDQogICAgICBjaGFsa0hhbmRsZXIoKQ0KDQogICAgICBjb25zdCBzdHlsZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJykpDQogICAgICAgIC5maWx0ZXIoc3R5bGUgPT4gew0KICAgICAgICAgIGNvbnN0IHRleHQgPSBzdHlsZS5pbm5lclRleHQNCiAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChvbGRWYWwsICdpJykudGVzdCh0ZXh0KSAmJiAhL0NoYWxrIFZhcmlhYmxlcy8udGVzdCh0ZXh0KQ0KICAgICAgICB9KQ0KICAgICAgc3R5bGVzLmZvckVhY2goc3R5bGUgPT4gew0KICAgICAgICBjb25zdCB7IGlubmVyVGV4dCB9ID0gc3R5bGUNCiAgICAgICAgaWYgKHR5cGVvZiBpbm5lclRleHQgIT09ICdzdHJpbmcnKSByZXR1cm4NCiAgICAgICAgc3R5bGUuaW5uZXJUZXh0ID0gdGhpcy51cGRhdGVTdHlsZShpbm5lclRleHQsIG9yaWdpbmFsQ2x1c3RlciwgdGhlbWVDbHVzdGVyKQ0KICAgICAgfSkNCg0KICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdmFsKQ0KDQogICAgICAkbWVzc2FnZS5jbG9zZSgpDQogICAgfQ0KICB9LA0KDQogIG1ldGhvZHM6IHsNCiAgICB1cGRhdGVTdHlsZShzdHlsZSwgb2xkQ2x1c3RlciwgbmV3Q2x1c3Rlcikgew0KICAgICAgbGV0IG5ld1N0eWxlID0gc3R5bGUNCiAgICAgIG9sZENsdXN0ZXIuZm9yRWFjaCgoY29sb3IsIGluZGV4KSA9PiB7DQogICAgICAgIG5ld1N0eWxlID0gbmV3U3R5bGUucmVwbGFjZShuZXcgUmVnRXhwKGNvbG9yLCAnaWcnKSwgbmV3Q2x1c3RlcltpbmRleF0pDQogICAgICB9KQ0KICAgICAgcmV0dXJuIG5ld1N0eWxlDQogICAgfSwNCg0KICAgIGdldENTU1N0cmluZyh1cmwsIHZhcmlhYmxlKSB7DQogICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7DQogICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpDQogICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7DQogICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkgew0KICAgICAgICAgICAgdGhpc1t2YXJpYWJsZV0gPSB4aHIucmVzcG9uc2VUZXh0LnJlcGxhY2UoL0Bmb250LWZhY2V7W159XSt9LywgJycpDQogICAgICAgICAgICByZXNvbHZlKCkNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCkNCiAgICAgICAgeGhyLnNlbmQoKQ0KICAgICAgfSkNCiAgICB9LA0KDQogICAgZ2V0VGhlbWVDbHVzdGVyKHRoZW1lKSB7DQogICAgICBjb25zdCB0aW50Q29sb3IgPSAoY29sb3IsIHRpbnQpID0+IHsNCiAgICAgICAgbGV0IHJlZCA9IHBhcnNlSW50KGNvbG9yLnNsaWNlKDAsIDIpLCAxNikNCiAgICAgICAgbGV0IGdyZWVuID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoMiwgNCksIDE2KQ0KICAgICAgICBsZXQgYmx1ZSA9IHBhcnNlSW50KGNvbG9yLnNsaWNlKDQsIDYpLCAxNikNCg0KICAgICAgICBpZiAodGludCA9PT0gMCkgeyAvLyB3aGVuIHByaW1hcnkgY29sb3IgaXMgaW4gaXRzIHJnYiBzcGFjZQ0KICAgICAgICAgIHJldHVybiBbcmVkLCBncmVlbiwgYmx1ZV0uam9pbignLCcpDQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgcmVkICs9IE1hdGgucm91bmQodGludCAqICgyNTUgLSByZWQpKQ0KICAgICAgICAgIGdyZWVuICs9IE1hdGgucm91bmQodGludCAqICgyNTUgLSBncmVlbikpDQogICAgICAgICAgYmx1ZSArPSBNYXRoLnJvdW5kKHRpbnQgKiAoMjU1IC0gYmx1ZSkpDQoNCiAgICAgICAgICByZWQgPSByZWQudG9TdHJpbmcoMTYpDQogICAgICAgICAgZ3JlZW4gPSBncmVlbi50b1N0cmluZygxNikNCiAgICAgICAgICBibHVlID0gYmx1ZS50b1N0cmluZygxNikNCg0KICAgICAgICAgIHJldHVybiBgIyR7cmVkfSR7Z3JlZW59JHtibHVlfWANCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICBjb25zdCBzaGFkZUNvbG9yID0gKGNvbG9yLCBzaGFkZSkgPT4gew0KICAgICAgICBsZXQgcmVkID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoMCwgMiksIDE2KQ0KICAgICAgICBsZXQgZ3JlZW4gPSBwYXJzZUludChjb2xvci5zbGljZSgyLCA0KSwgMTYpDQogICAgICAgIGxldCBibHVlID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoNCwgNiksIDE2KQ0KDQogICAgICAgIHJlZCA9IE1hdGgucm91bmQoKDEgLSBzaGFkZSkgKiByZWQpDQogICAgICAgIGdyZWVuID0gTWF0aC5yb3VuZCgoMSAtIHNoYWRlKSAqIGdyZWVuKQ0KICAgICAgICBibHVlID0gTWF0aC5yb3VuZCgoMSAtIHNoYWRlKSAqIGJsdWUpDQoNCiAgICAgICAgcmVkID0gcmVkLnRvU3RyaW5nKDE2KQ0KICAgICAgICBncmVlbiA9IGdyZWVuLnRvU3RyaW5nKDE2KQ0KICAgICAgICBibHVlID0gYmx1ZS50b1N0cmluZygxNikNCg0KICAgICAgICByZXR1cm4gYCMke3JlZH0ke2dyZWVufSR7Ymx1ZX1gDQogICAgICB9DQoNCiAgICAgIGNvbnN0IGNsdXN0ZXJzID0gW3RoZW1lXQ0KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gOTsgaSsrKSB7DQogICAgICAgIGNsdXN0ZXJzLnB1c2godGludENvbG9yKHRoZW1lLCBOdW1iZXIoKGkgLyAxMCkudG9GaXhlZCgyKSkpKQ0KICAgICAgfQ0KICAgICAgY2x1c3RlcnMucHVzaChzaGFkZUNvbG9yKHRoZW1lLCAwLjEpKQ0KICAgICAgcmV0dXJuIGNsdXN0ZXJzDQogICAgfQ0KICB9DQp9DQo="},{"version":3,"sources":["ThemePicker.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ThemePicker.vue","sourceRoot":"src/layout/components/Settings","sourcesContent":["<template>\r\n  <el-color-picker\r\n    v-model=\"theme\"\r\n    :predefine=\"['#409EFF', '#1890ff', '#304156','#212121','#11a983', '#13c2c2', '#6959CD', '#f5222d', ]\"\r\n    class=\"theme-picker\"\r\n    popper-class=\"theme-picker-dropdown\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nconst version = require('element-ui/package.json').version // element-ui version from node_modules\r\nconst ORIGINAL_THEME = '#409EFF' // default color\r\n\r\nexport default {\r\n  name: 'ThemePicker',\r\n  data() {\r\n    return {\r\n      chalk: '', // content of theme-chalk css\r\n      theme: ''\r\n    }\r\n  },\r\n  computed: {\r\n    defaultTheme() {\r\n      return this.$store.state.settings.theme\r\n    }\r\n  },\r\n  watch: {\r\n    defaultTheme: {\r\n      handler: function(val, oldVal) {\r\n        this.theme = val\r\n      },\r\n      immediate: true\r\n    },\r\n    async theme(val) {\r\n      const oldVal = this.chalk ? this.theme : ORIGINAL_THEME\r\n      if (typeof val !== 'string') return\r\n      const themeCluster = this.getThemeCluster(val.replace('#', ''))\r\n      const originalCluster = this.getThemeCluster(oldVal.replace('#', ''))\r\n      console.log(themeCluster, originalCluster)\r\n\r\n      const $message = this.$message({\r\n        message: '  应用颜色设置中...',\r\n        customClass: 'theme-message',\r\n        type: 'success',\r\n        duration: 0,\r\n        iconClass: 'el-icon-loading'\r\n      })\r\n\r\n      const getHandler = (variable, id) => {\r\n        return () => {\r\n          const originalCluster = this.getThemeCluster(ORIGINAL_THEME.replace('#', ''))\r\n          const newStyle = this.updateStyle(this[variable], originalCluster, themeCluster)\r\n\r\n          let styleTag = document.getElementById(id)\r\n          if (!styleTag) {\r\n            styleTag = document.createElement('style')\r\n            styleTag.setAttribute('id', id)\r\n            document.head.appendChild(styleTag)\r\n          }\r\n          styleTag.innerText = newStyle\r\n        }\r\n      }\r\n\r\n      if (!this.chalk) {\r\n        const url = `https://unpkg.com/element-ui@${version}/lib/theme-chalk/index.css`\r\n        await this.getCSSString(url, 'chalk')\r\n      }\r\n\r\n      const chalkHandler = getHandler('chalk', 'chalk-style')\r\n\r\n      chalkHandler()\r\n\r\n      const styles = [].slice.call(document.querySelectorAll('style'))\r\n        .filter(style => {\r\n          const text = style.innerText\r\n          return new RegExp(oldVal, 'i').test(text) && !/Chalk Variables/.test(text)\r\n        })\r\n      styles.forEach(style => {\r\n        const { innerText } = style\r\n        if (typeof innerText !== 'string') return\r\n        style.innerText = this.updateStyle(innerText, originalCluster, themeCluster)\r\n      })\r\n\r\n      this.$emit('change', val)\r\n\r\n      $message.close()\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    updateStyle(style, oldCluster, newCluster) {\r\n      let newStyle = style\r\n      oldCluster.forEach((color, index) => {\r\n        newStyle = newStyle.replace(new RegExp(color, 'ig'), newCluster[index])\r\n      })\r\n      return newStyle\r\n    },\r\n\r\n    getCSSString(url, variable) {\r\n      return new Promise(resolve => {\r\n        const xhr = new XMLHttpRequest()\r\n        xhr.onreadystatechange = () => {\r\n          if (xhr.readyState === 4 && xhr.status === 200) {\r\n            this[variable] = xhr.responseText.replace(/@font-face{[^}]+}/, '')\r\n            resolve()\r\n          }\r\n        }\r\n        xhr.open('GET', url)\r\n        xhr.send()\r\n      })\r\n    },\r\n\r\n    getThemeCluster(theme) {\r\n      const tintColor = (color, tint) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        if (tint === 0) { // when primary color is in its rgb space\r\n          return [red, green, blue].join(',')\r\n        } else {\r\n          red += Math.round(tint * (255 - red))\r\n          green += Math.round(tint * (255 - green))\r\n          blue += Math.round(tint * (255 - blue))\r\n\r\n          red = red.toString(16)\r\n          green = green.toString(16)\r\n          blue = blue.toString(16)\r\n\r\n          return `#${red}${green}${blue}`\r\n        }\r\n      }\r\n\r\n      const shadeColor = (color, shade) => {\r\n        let red = parseInt(color.slice(0, 2), 16)\r\n        let green = parseInt(color.slice(2, 4), 16)\r\n        let blue = parseInt(color.slice(4, 6), 16)\r\n\r\n        red = Math.round((1 - shade) * red)\r\n        green = Math.round((1 - shade) * green)\r\n        blue = Math.round((1 - shade) * blue)\r\n\r\n        red = red.toString(16)\r\n        green = green.toString(16)\r\n        blue = blue.toString(16)\r\n\r\n        return `#${red}${green}${blue}`\r\n      }\r\n\r\n      const clusters = [theme]\r\n      for (let i = 0; i <= 9; i++) {\r\n        clusters.push(tintColor(theme, Number((i / 10).toFixed(2))))\r\n      }\r\n      clusters.push(shadeColor(theme, 0.1))\r\n      return clusters\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.theme-message,\r\n.theme-picker-dropdown {\r\n  z-index: 99999 !important;\r\n}\r\n\r\n.theme-picker .el-color-picker__trigger {\r\n  height: 26px !important;\r\n  width: 26px !important;\r\n  padding: 2px;\r\n}\r\n\r\n.theme-picker-dropdown .el-color-dropdown__link-btn {\r\n  display: none;\r\n}\r\n</style>\r\n"]}]}