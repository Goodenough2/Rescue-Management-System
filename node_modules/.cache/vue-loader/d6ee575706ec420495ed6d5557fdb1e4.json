{"remainingRequest":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\src\\views\\goods-manage\\goods-category.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\src\\views\\goods-manage\\goods-category.vue","mtime":1600863790807},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBhZGFwdGl2ZSBmcm9tICdAL2RpcmVjdGl2ZS9lbC10YWJsZScKaW1wb3J0IHNldFJ1bGUgZnJvbSAnQC91dGlscy9mb3JtLXZhbGlkYXRlJwppbXBvcnQgUGFnaW5hdGlvbiBmcm9tICdAL2NvbXBvbmVudHMvUGFnaW5hdGlvbicKaW1wb3J0ICogYXMgZ29vZHNDb2xvdXIgZnJvbSAnQC9hcGkvZ29vZHMtbWFuYWdlL2dvb2RzLWNvbG9yJwppbXBvcnQgKiBhcyBzdXBwbGllciBmcm9tICdAL2FwaS9vcmRlci1tYW5hZ2Uvc3VwcGxpZXInCmltcG9ydCAqIGFzIGdvb2RzQ2F0ZWdvcnkgZnJvbSAnQC9hcGkvZ29vZHMtbWFuYWdlL2dvb2RzLWNhdGVnb3J5JwppbXBvcnQgKiBhcyBnb29kc0NhdGVnb3J5Q2xhc3NpZmljYXRpb24gZnJvbSAnQC9hcGkvZ29vZHMtbWFuYWdlL2dvb2RzLWNhdGVnb3J5LWNsYXNzaWZpY2F0aW9uJwppbXBvcnQgKiBhcyBnb29kc1VuaXQgZnJvbSAnQC9hcGkvZ29vZHMtbWFuYWdlL2dvb2RzLXVuaXQnCmltcG9ydCAqIGFzIGdvb2RzUHJvcGVydHkgZnJvbSAnQC9hcGkvZ29vZHMtbWFuYWdlL2dvb2RzLXByb3BlcnR5JwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdHb29kc1R5cGUnLAogIGNvbXBvbmVudHM6IHsgUGFnaW5hdGlvbiB9LAogIGRpcmVjdGl2ZXM6IHsgYWRhcHRpdmUgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYWNjZXNzOiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmFjY2Vzc1snR29vZHNNYW5hZ2UnXVsnR29vZHNDYXRlZ29yeSddLAogICAgICBkYXRhczogbnVsbCwKICAgICAgZ29vZHNDYXRlZ29yeUNsYXNzaWZpY2F0aW9uczogbnVsbCwKICAgICAgZ29vZHNDYXRlZ29yeUNsYXNzaWZpY2F0aW9uc0xpc3Q6IG51bGwsCiAgICAgIGdvb2RzQ29sb3VyczogbnVsbCwKICAgICAgZ29vZHNDb2xvdXJzTGlzdDogbnVsbCwKICAgICAgc3VwcGxpZXJzOiBudWxsLAogICAgICBnb29kc1VuaXRzOiBudWxsLAogICAgICBnb29kc1Byb3BlcnRpZXM6IG51bGwsCiAgICAgIGdvb2RQcm9wZXJ0eVZhbHVlOiBbXSwKICAgICAgcXVlcnk6IHsgY29kZTogbnVsbCwgbmFtZTogbnVsbCwgY2xhc3NpZmljYXRpb25JZDogbnVsbCwgYmF0Y2g6IG51bGwsIGNvbG91cklkOiBudWxsLCBzdXBwbGllcklkOiBudWxsLCB1bml0SWQ6IG51bGwgfSwKICAgICAgcGFnZTogeyB0b3RhbDogMCwgY3VycmVudDogMSwgc2l6ZTogMjAgfSwKICAgICAgc29ydDogeyBwcm9wOiAnc29ydCcsIG9yZGVyOiAnYXNjZW5kaW5nJyB9LAogICAgICBkZXRhaWw6IHsKICAgICAgICBkaWFsb2c6IHsgdGl0bGU6ICfotKfniannsbvliKvkv6Hmga8nLCB2aXNpYmxlOiBmYWxzZSwgbGFiZWxXaWR0aDogJzE1MHB4JyB9LAogICAgICAgIG1vZGVsczogewogICAgICAgICAgY29kZTogbnVsbCwKICAgICAgICAgIG5hbWU6IG51bGwsCiAgICAgICAgICBnb29kc0NhdGVnb3J5Q2xhc3NpZmljYXRpb246IHsgbmFtZTogbnVsbCB9LAogICAgICAgICAgYmF0Y2g6IG51bGwsCiAgICAgICAgICBzcGVjaWZpY2F0aW9uOiBudWxsLAogICAgICAgICAgZ29vZHNVbml0OiB7IG5hbWU6IG51bGwgfSwKICAgICAgICAgIGdvb2RzQ29sb3VyOiB7IG5hbWU6IG51bGwgfSwKICAgICAgICAgIHVuaXRQcmljZTogbnVsbCwKICAgICAgICAgIHVuaXRXZWlnaHQ6IG51bGwsCiAgICAgICAgICBzdXBwbGllcjogeyBuYW1lOiBudWxsIH0sCiAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCwKICAgICAgICAgIG5vbmV4aXN0ZW50UHJvcGVydGllczogW10sCiAgICAgICAgICBleGlzdGVudFByb3BlcnRpZXM6IFtdCiAgICAgICAgfQogICAgICB9LAogICAgICBjcmVhdGU6IHsKICAgICAgICBkaWFsb2c6IHsgdGl0bGU6ICfmt7vliqDotKfniannsbvliKsnLCB2aXNpYmxlOiBmYWxzZSwgbGFiZWxXaWR0aDogJzE1MHB4JyB9LAogICAgICAgIG1vZGVsczogewogICAgICAgICAgZ29vZHNDYXRlZ29yeTogeyBjb2RlOiBudWxsLCBuYW1lOiBudWxsLCBsZXZlbDogbnVsbCwgcGFyZW50SWQ6IG51bGwsIGRlc2NyaXB0aW9uOiBudWxsLCBjbGFzc2lmaWNhdGlvbklkOiBudWxsLCBjb2xvdXJOYW1lOiBudWxsLCBjb2xvdXJJZDogbnVsbCwgdW5pdE5hbWU6IG51bGwsIHVuaXRJZDogbnVsbCB9LAogICAgICAgICAgZ29vZHNQcm9wZXJ0eVZhbHVlOiBbXQogICAgICAgIH0sCiAgICAgICAgcnVsZXM6IHsKICAgICAgICAgIGdvb2RzQ2F0ZWdvcnk6IHsKICAgICAgICAgICAgY29kZTogc2V0UnVsZSgn6LSn54mp57G75Yir57yW5Y+3JywgW3sgcmVxdWlyZWQ6IHRydWUgfSwgeyBsZW5ndGg6IFswLCAzMF0gfV0pLAogICAgICAgICAgICBuYW1lOiBzZXRSdWxlKCfotKfniannsbvliKvlkI3np7AnLCBbeyByZXF1aXJlZDogdHJ1ZSB9LCB7IGxlbmd0aDogWzAsIDUwXSB9XSksCiAgICAgICAgICAgIGNsYXNzaWZpY2F0aW9uSWQ6IHNldFJ1bGUoJ+i0p+eJqeexu+WIq+WIhuexuycsIFt7IHNlbGVjdGVkOiB0cnVlIH1dKSwKICAgICAgICAgICAgYmF0Y2g6IHNldFJ1bGUoJ+i0p+eJqeaJueasoScsIFt7IHJlcXVpcmVkOiB0cnVlIH0sIHsgbGVuZ3RoOiBbMCwgMzBdIH1dKSwKICAgICAgICAgICAgc3BlY2lmaWNhdGlvbjogc2V0UnVsZSgn6LSn54mp6KeE5qC8JywgW3sgbGVuZ3RoOiBbMCwgMzBdIH1dKSwKICAgICAgICAgICAgdW5pdE5hbWU6IHNldFJ1bGUoJ+i0p+eJqeWfuuehgOWNleS9jScsIFt7IHJlcXVpcmVkOiB0cnVlIH1dKSwKICAgICAgICAgICAgdW5pdElkOiBzZXRSdWxlKCfotKfnianln7rnoYDljZXkvY0nLCBbeyBzZWxlY3RlZDogdHJ1ZSB9XSksCiAgICAgICAgICAgIC8vIGNvbG91ck5hbWU6IHNldFJ1bGUoJ+i0p+eJqeminOiJsicsIFt7IHNlbGVjdGVkOiB0cnVlIH1dKSwKICAgICAgICAgICAgLy8gY29sb3VySWQ6IHNldFJ1bGUoJ+i0p+eJqeminOiJsicsIFt7IHNlbGVjdGVkOiB0cnVlIH1dKSwKICAgICAgICAgICAgLy8gdW5pdFByaWNlOiBzZXRSdWxlKCfotKfnianljZXku7cnLCBbeyByZXF1aXJlZDogdHJ1ZSB9LCB7IGxlbmd0aDogWzAsIDUwXSB9XSksCiAgICAgICAgICAgIC8vIHVuaXRXZWlnaHQ6IHNldFJ1bGUoJ+i0p+eJqeWNleS7tycsIFt7IHJlcXVpcmVkOiB0cnVlIH0sIHsgbGVuZ3RoOiBbMCwgNTBdIH1dKSwKICAgICAgICAgICAgLy8gc3VwcGxpZXJJZDogc2V0UnVsZSgn5L6b5bqU5ZWGJywgW3sgc2VsZWN0ZWQ6IHRydWUgfV0pLAogICAgICAgICAgICBkZXNjcmlwdGlvbjogc2V0UnVsZSgn6LSn54mp57G75Yir5o+P6L+wJywgW3sgbGVuZ3RoOiBbMCwgMTAwXSB9XSkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIHVwZGF0ZTogewogICAgICAgIGRpYWxvZzogeyB0aXRsZTogJ+e8lui+keexu+WIq+S/oeaBrycsIHZpc2libGU6IGZhbHNlLCBsYWJlbFdpZHRoOiAnMTMwcHgnIH0sCiAgICAgICAgbW9kZWxzOiB7IGNvZGU6IG51bGwsIG5hbWU6IG51bGwsIGxldmVsOiBudWxsLCBwYXJlbnRJZDogbnVsbCwgZGVzY3JpcHRpb246IG51bGwsIGNsYXNzaWZpY2F0aW9uSWQ6IG51bGwsIGV4aXN0ZW50UHJvcGVydGllczogW10sIG5vbmV4aXN0ZW50UHJvcGVydGllczogW10gfSwKICAgICAgICBydWxlczogewogICAgICAgICAgY29kZTogc2V0UnVsZSgn6LSn54mp57G75Yir57yW5Y+3JywgW3sgcmVxdWlyZWQ6IHRydWUgfSwgeyBsZW5ndGg6IFswLCAzMF0gfV0pLAogICAgICAgICAgbmFtZTogc2V0UnVsZSgn6LSn54mp57G75Yir5ZCN56ewJywgW3sgcmVxdWlyZWQ6IHRydWUgfSwgeyBsZW5ndGg6IFswLCA1MF0gfV0pLAogICAgICAgICAgY2xhc3NpZmljYXRpb25JZDogc2V0UnVsZSgn6LSn54mp57G75Yir5YiG57G7JywgW3sgc2VsZWN0ZWQ6IHRydWUgfV0pLAogICAgICAgICAgYmF0Y2g6IHNldFJ1bGUoJ+i0p+eJqeaJueasoScsIFt7IHJlcXVpcmVkOiB0cnVlIH0sIHsgbGVuZ3RoOiBbMCwgMzBdIH1dKSwKICAgICAgICAgIHNwZWNpZmljYXRpb246IHNldFJ1bGUoJ+i0p+eJqeinhOagvCcsIFt7IGxlbmd0aDogWzAsIDMwXSB9XSksCiAgICAgICAgICB1bml0SWQ6IHNldFJ1bGUoJ+i0p+eJqeWfuuehgOWNleS9jScsIFt7IHNlbGVjdGVkOiB0cnVlIH1dKSwKICAgICAgICAgIC8vIGNvbG91cm5hbWU6IHNldFJ1bGUoJ+i0p+eJqeminOiJsicsIFt7IHNlbGVjdGVkOiB0cnVlIH1dKSwKICAgICAgICAgIC8vIHVuaXRQcmljZTogc2V0UnVsZSgn6LSn54mp5Y2V5Lu3JywgW3sgcmVxdWlyZWQ6IHRydWUgfSwgeyBsZW5ndGg6IFswLCA1MF0gfV0pLAogICAgICAgICAgLy8gdW5pdFdlaWdodDogc2V0UnVsZSgn6LSn54mp5Y2V5Lu3JywgW3sgcmVxdWlyZWQ6IHRydWUgfSwgeyBsZW5ndGg6IFswLCA1MF0gfV0pLAogICAgICAgICAgLy8gc3VwcGxpZXJJZDogc2V0UnVsZSgn5L6b5bqU5ZWGJywgW3sgc2VsZWN0ZWQ6IHRydWUgfV0pLAogICAgICAgICAgZGVzY3JpcHRpb246IHNldFJ1bGUoJ+i0p+eJqeexu+WIq+aPj+i/sCcsIFt7IGxlbmd0aDogWzAsIDEwMF0gfV0pCiAgICAgICAgfQogICAgICB9LAogICAgICBhZGQ6IHsKICAgICAgICBkaWFsb2c6IHsgdGl0bGU6ICfmlrDlop7mianlsZXlsZ7mgKcnLCB2aXNpYmxlOiBmYWxzZSwgbGFiZWxXaWR0aDogJzE1MHB4JyB9LAogICAgICAgIG1vZGVsczogeyBuYW1lOiBudWxsLCBkZXNjcmlwdGlvbjogbnVsbCB9LAogICAgICAgIHJ1bGVzOiB7CiAgICAgICAgICBuYW1lOiBzZXRSdWxlKCfmianlsZXlsZ7mgKflkI3np7AnLCBbeyByZXF1aXJlZDogdHJ1ZSB9LCB7IGxlbmd0aDogWzAsIDI1NV0gfV0pCiAgICAgICAgfQogICAgICB9LAogICAgICBsb2FkaW5nOiB7IGxpc3Q6IHRydWUsIGV4cG9ydDogZmFsc2UsIGRldGFpbDogZmFsc2UsIHVwZGF0ZTogZmFsc2UgfSwKICAgICAgc29ydE9yZGVyczogWydhc2NlbmRpbmcnLCAnZGVzY2VuZGluZyddCiAgICB9CiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5nZXREYXRhcygpCiAgICB0aGlzLmdldENsYXNzaWZpY2F0aW9ucygpCiAgICB0aGlzLmdldENvbG91cnMoKQogICAgdGhpcy5nZXRTdXBwbGllcnMoKQogICAgdGhpcy5nZXRHb29kc1VuaXRzKCkKICAgIHRoaXMuZ2V0UHJvcGVydGllcygpCiAgfSwKICBtb3VudGVkKCkgewogICAgY29uc3QgZmxhZyA9IHRoaXMuJHJvdXRlLnF1ZXJ5LmZsYWcKICAgIHRoaXMuaGFuZGxlQ3JlYXRlQ2F0ZWdvcmllcyhmbGFnKQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0RGF0YXMoKSB7CiAgICAgIHRoaXMubG9hZGluZy5saXN0ID0gdHJ1ZQogICAgICBnb29kc0NhdGVnb3J5LmdldExpc3QodGhpcy5xdWVyeSwgdGhpcy5wYWdlLCB0aGlzLnNvcnQpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMuZGF0YXMgPSByZXNwb25zZS5kYXRhLml0ZW1zCiAgICAgICAgdGhpcy5wYWdlLnRvdGFsID0gcmVzcG9uc2UuZGF0YS50b3RhbAogICAgICAgIHRoaXMubG9hZGluZy5saXN0ID0gZmFsc2UKICAgICAgfSkuY2F0Y2gocmVqZWN0ID0+IHsKICAgICAgICB0aGlzLmxvYWRpbmcubGlzdCA9IGZhbHNlCiAgICAgIH0pCiAgICB9LAogICAgZ2V0Q2xhc3NpZmljYXRpb25zKCkgewogICAgICBnb29kc0NhdGVnb3J5Q2xhc3NpZmljYXRpb24uZ2V0bGlzdCgzKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICB0aGlzLmdvb2RzQ2F0ZWdvcnlDbGFzc2lmaWNhdGlvbnMgPSByZXNwb25zZS5kYXRhCiAgICAgIH0pLmNhdGNoKHJlamVjdCA9PiB7CiAgICAgIH0pCiAgICAgIGdvb2RzQ2F0ZWdvcnlDbGFzc2lmaWNhdGlvbi5nZXRsaXN0KDQpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMuZ29vZHNDYXRlZ29yeUNsYXNzaWZpY2F0aW9uc0xpc3QgPSByZXNwb25zZS5kYXRhCiAgICAgIH0pLmNhdGNoKHJlamVjdCA9PiB7CiAgICAgIH0pCiAgICB9LAogICAgZ2V0Q29sb3VycygpIHsKICAgICAgZ29vZHNDb2xvdXIuZ2V0bGlzdCgpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMuZ29vZHNDb2xvdXJzID0gcmVzcG9uc2UuZGF0YQogICAgICB9KS5jYXRjaChyZWplY3QgPT4gewogICAgICB9KQogICAgfSwKICAgIGdldFByb3BlcnRpZXMoKSB7CiAgICAgIGdvb2RzUHJvcGVydHkuZ2V0bGlzdCgpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMuZ29vZHNQcm9wZXJ0aWVzID0gcmVzcG9uc2UuZGF0YQogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzcG9uc2UuZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgdGhpcy5nb29kUHJvcGVydHlWYWx1ZS5wdXNoKHsKICAgICAgICAgICAgdmFsdWU6IG51bGwsCiAgICAgICAgICAgIHByb3BlcnR5SWQ6IG51bGwKICAgICAgICAgIH0pCiAgICAgICAgICB0aGlzLmdvb2RQcm9wZXJ0eVZhbHVlW2ldLnByb3BlcnR5SWQgPSByZXNwb25zZS5kYXRhW2ldLmlkCiAgICAgICAgfQogICAgICB9KS5jYXRjaChyZWplY3QgPT4gewogICAgICB9KQogICAgfSwKICAgIGdldFN1cHBsaWVycygpIHsKICAgICAgc3VwcGxpZXIuZ2V0bGlzdCgpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMuc3VwcGxpZXJzID0gcmVzcG9uc2UuZGF0YQogICAgICB9KS5jYXRjaChyZWplY3QgPT4gewogICAgICB9KQogICAgfSwKICAgIGdldEdvb2RzVW5pdHMoKSB7CiAgICAgIGdvb2RzVW5pdC5nZXRsaXN0KCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgdGhpcy5nb29kc1VuaXRzID0gcmVzcG9uc2UuZGF0YQogICAgICB9KS5jYXRjaChyZWplY3QgPT4gewogICAgICB9KQogICAgfSwKICAgIGhhbmRsZUNyZWF0ZUNhdGVnb3JpZXMoZmxhZykgewogICAgICBpZiAoZmxhZyA9PT0gdHJ1ZSkgewogICAgICAgIHRoaXMuaGFuZGxlQ3JlYXRlKCkKICAgICAgfQogICAgfSwKICAgIGhhbmRsZVF1ZXJ5KCkgewogICAgICB0aGlzLnBhZ2UuY3VycmVudCA9IDEKICAgICAgdGhpcy5nZXREYXRhcygpCiAgICB9LAogICAgaGFuZGxlU29ydChkYXRhKSB7CiAgICAgIHRoaXMuc29ydC5wcm9wID0gZGF0YS5wcm9wCiAgICAgIHRoaXMuc29ydC5vcmRlciA9IGRhdGEub3JkZXIKICAgICAgdGhpcy5nZXREYXRhcygpCiAgICB9LAogICAgaGFuZGxlQ2hhbmdlKHZhbHVlKSB7CiAgICAgIGNvbnN0IGlkID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0KICAgICAgdGhpcy5jcmVhdGUubW9kZWxzLmdvb2RzQ2F0ZWdvcnkuY2xhc3NpZmljYXRpb25JZCA9IGlkCiAgICAgIHRoaXMudXBkYXRlLm1vZGVscy5jbGFzc2lmaWNhdGlvbklkID0gaWQKICAgIH0sCiAgICBoYW5kbGVEZXRhaWwocm93KSB7CiAgICAgIC8vIOiLpeWIl+ihqOaVsOaNruWxleekuuS6huWFqOmDqOWxnuaAp++8jOWImeWPr+ebtOaOpeaLt+i0neWIl+ihqOaVsOaNrgogICAgICAvLyB0aGlzLmRldGFpbC5tb2RlbHMgPSBPYmplY3QuYXNzaWduKHt9LCByb3cpCiAgICAgIHRoaXMuZGV0YWlsLmRpYWxvZy52aXNpYmxlID0gdHJ1ZQogICAgICB0aGlzLmxvYWRpbmcuZGV0YWlsID0gdHJ1ZQogICAgICBnb29kc0NhdGVnb3J5LmdldChyb3cuaWQpLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgIHRoaXMuZGV0YWlsLm1vZGVscyA9IHJlc3BvbnNlLmRhdGEKICAgICAgICB0aGlzLmxvYWRpbmcuZGV0YWlsID0gZmFsc2UKICAgICAgfSkuY2F0Y2gocmVqZWN0ID0+IHsKICAgICAgICB0aGlzLmxvYWRpbmcuZGV0YWlsID0gZmFsc2UKICAgICAgfSkKICAgICAgdGhpcy5sb2FkaW5nLmRldGFpbCA9IGZhbHNlCiAgICB9LAogICAgaGFuZGxlQ3JlYXRlKCkgewogICAgICB0aGlzLmNyZWF0ZS5kaWFsb2cudmlzaWJsZSA9IHRydWUKICAgIH0sCiAgICBjcmVhdGVEYXRhKCkgewogICAgICB0aGlzLmNyZWF0ZS5tb2RlbHMuZ29vZHNDYXRlZ29yeS5jb2xvdXJJZCA9IG51bGwKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdvb2RzQ29sb3Vycy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICh0aGlzLmdvb2RzQ29sb3Vyc1tpXS5uYW1lID09PSB0aGlzLmNyZWF0ZS5tb2RlbHMuZ29vZHNDYXRlZ29yeS5jb2xvdXJOYW1lKSB7CiAgICAgICAgICB0aGlzLmNyZWF0ZS5tb2RlbHMuZ29vZHNDYXRlZ29yeS5jb2xvdXJJZCA9IHRoaXMuZ29vZHNDb2xvdXJzW2ldLmlkCiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuY3JlYXRlLm1vZGVscy5nb29kc0NhdGVnb3J5LnVuaXRJZCA9IG51bGwKICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdvb2RzVW5pdHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy5nb29kc1VuaXRzW2ldLm5hbWUgPT09IHRoaXMuY3JlYXRlLm1vZGVscy5nb29kc0NhdGVnb3J5LnVuaXROYW1lKSB7CiAgICAgICAgICB0aGlzLmNyZWF0ZS5tb2RlbHMuZ29vZHNDYXRlZ29yeS51bml0SWQgPSB0aGlzLmdvb2RzVW5pdHNbaV0uaWQKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5jcmVhdGUubW9kZWxzLmdvb2RzUHJvcGVydHlWYWx1ZSA9IFtdCiAgICAgIHRoaXMuY3JlYXRlLm1vZGVscy5nb29kc1Byb3BlcnR5VmFsdWUgPSB0aGlzLmdvb2RQcm9wZXJ0eVZhbHVlLmNvbmNhdCh0aGlzLmNyZWF0ZS5tb2RlbHMuZ29vZHNQcm9wZXJ0eVZhbHVlKQogICAgICB0aGlzLiRyZWZzWydmb3JtQ3JlYXRlJ10udmFsaWRhdGUoKHZhbGlkKSA9PiB7CiAgICAgICAgaWYgKCF2YWxpZCkgcmV0dXJuIGZhbHNlCiAgICAgICAgZ29vZHNDYXRlZ29yeS5jcmVhdGUodGhpcy5jcmVhdGUubW9kZWxzKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgIC8vIOS4uuaWueS+v+i/nue7rea3u+WKoO+8jGNyZWF0ZeWvueivneahhuS4jeWFs+mXrQogICAgICAgICAgLy8g6ZyA6KaB5riF56m655qE6KGo5Y2V77yM5omL5Yqo5riF56m677yM6Iez5bCR5riF56m65LiA5Liq5b+F5aGr6aG577yM6Ziy5q2i54K55Ye75Lik6YGNCiAgICAgICAgICB0aGlzLmNyZWF0ZS5tb2RlbHMubmFtZSA9ICcnCiAgICAgICAgICB0aGlzLmNyZWF0ZS5tb2RlbHMuY29kZSA9ICcnCiAgICAgICAgICB0aGlzLmNyZWF0ZS5tb2RlbHMudW5pdFByaWNlID0gJycKICAgICAgICAgIHRoaXMuY3JlYXRlLm1vZGVscy51bml0V2VpZ2h0ID0gJycKICAgICAgICAgIC8vIOmHjeaWsOiOt+WPluaVsOaNrgogICAgICAgICAgdGhpcy5nZXREYXRhcygpCiAgICAgICAgfSkuY2F0Y2gocmVqZWN0ID0+IHsKICAgICAgICB9KQogICAgICB9KQogICAgfSwKICAgIGhhbmRsZVJhbmt1cChyb3cpIHsKICAgICAgdGhpcy5sb2FkaW5nLmxpc3QgPSB0cnVlCiAgICAgIGdvb2RzQ2F0ZWdvcnkucmFua3VwKHJvdy5pZCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgdGhpcy5nZXREYXRhcygpCiAgICAgICAgdGhpcy5sb2FkaW5nLmxpc3QgPSBmYWxzZQogICAgICB9KS5jYXRjaChyZWplY3QgPT4gewogICAgICAgIHRoaXMubG9hZGluZy5saXN0ID0gZmFsc2UKICAgICAgfSkKICAgIH0sCiAgICBoYW5kbGVVcGRhdGUocm93KSB7CiAgICAgIC8vICDoi6XliJfooajmlbDmja7lsZXnpLrkuoblhajpg6jlsZ7mgKfvvIzliJnlj6/nm7TmjqXmi7fotJ3liJfooajmlbDmja7nlKjkuo7nvJbovpEKICAgICAgLy8gdGhpcy51cGRhdGUubW9kZWxzID0gT2JqZWN0LmFzc2lnbih7fSwgcm93KQogICAgICB0aGlzLnVwZGF0ZS5kaWFsb2cudmlzaWJsZSA9IHRydWUKICAgICAgdGhpcy5sb2FkaW5nLnVwZGF0ZSA9IHRydWUKICAgICAgZ29vZHNDYXRlZ29yeS5nZXQocm93LmlkKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICB0aGlzLnVwZGF0ZS5tb2RlbHMgPSByZXNwb25zZS5kYXRhCiAgICAgICAgdGhpcy5sb2FkaW5nLnVwZGF0ZSA9IGZhbHNlCiAgICAgIH0pLmNhdGNoKHJlamVjdCA9PiB7CiAgICAgICAgdGhpcy5sb2FkaW5nLnVwZGF0ZSA9IGZhbHNlCiAgICAgIH0pCiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsKICAgICAgICB0aGlzLiRyZWZzWydmb3JtVXBkYXRlJ10uY2xlYXJWYWxpZGF0ZSgpCiAgICAgIH0pCiAgICAgIHRoaXMubG9hZGluZy51cGRhdGUgPSBmYWxzZQogICAgfSwKICAgIHVwZGF0ZURhdGEoKSB7CiAgICAgIHRoaXMuJHJlZnNbJ2Zvcm1VcGRhdGUnXS52YWxpZGF0ZSgodmFsaWQpID0+IHsKICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm4gZmFsc2UKICAgICAgICBjb25zdCB0ZW1wRGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMudXBkYXRlLm1vZGVscykKICAgICAgICBnb29kc0NhdGVnb3J5LnVwZGF0ZSh0ZW1wRGF0YSkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAvLyDph43mlrDojrflj5bmlbDmja4KICAgICAgICAgIHRoaXMuZ2V0RGF0YXMoKQogICAgICAgICAgdGhpcy51cGRhdGUuZGlhbG9nLnZpc2libGUgPSBmYWxzZQogICAgICAgIH0pLmNhdGNoKHJlamVjdCA9PiB7CiAgICAgICAgfSkKICAgICAgfSkKICAgIH0sCiAgICBoYW5kbGVEZWxldGUocm93KSB7CiAgICAgIHRoaXMuZGVsZXRlRGF0YShbcm93LmlkXSkKICAgIH0sCiAgICBoYW5kbGVEZWxldGVzKHJvdykgewogICAgICBpZiAodGhpcy4kcmVmcy5saXN0VGFibGUuc2VsZWN0aW9uLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UoeyB0eXBlOiAnd2FybmluZycsIG1lc3NhZ2U6ICfor7flnKjkuIvpnaLooajmoLznmoTlt6bkvqfli77pgInpnIDopoHliKDpmaTnmoTmlbDmja4nLCBkdXJhdGlvbjogNDAwMCB9KQogICAgICAgIHJldHVybiBmYWxzZQogICAgICB9CiAgICAgIGNvbnN0IGlkcyA9IFtdCiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLiRyZWZzLmxpc3RUYWJsZS5zZWxlY3Rpb24pIHsKICAgICAgICBpZHMucHVzaChpdGVtLmlkKQogICAgICB9CiAgICAgIHRoaXMuZGVsZXRlRGF0YShpZHMpCiAgICB9LAogICAgZGVsZXRlRGF0YShpZHMpIHsKICAgICAgdGhpcy4kY29uZmlybSgn5pWw5o2u5Yig6Zmk5ZCO77yM5LiN5Y+v5oGi5aSNLCDmmK/lkKbnu6fnu60/JywgJ+aPkOekuicsIHsKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgdHlwZTogJ3dhcm5pbmcnCiAgICAgIH0pLnRoZW4oKCkgPT4gewogICAgICAgIGdvb2RzQ2F0ZWdvcnkuZGVsKGlkcykudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAvLyDph43mlrDojrflj5bmlbDmja4KICAgICAgICAgIHRoaXMuZ2V0RGF0YXMoKQogICAgICAgIH0pLmNhdGNoKHJlamVjdCA9PiB7CiAgICAgICAgfSkKICAgICAgfSkKICAgIH0sCiAgICBkZWxldGVHb29kc1Byb3BlcnRpZXMoaWQpIHsKICAgICAgdmFyIGlkcyA9IGlkLnNwbGl0KCkKICAgICAgdGhpcy4kY29uZmlybSgn5omp5bGV5bGe5oCn5Yig6Zmk5ZCO77yM5LiN5Y+v5oGi5aSNLCDmmK/lkKbnu6fnu60/JywgJ+aPkOekuicsIHsKICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+ehruWumicsCiAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogJ+WPlua2iCcsCiAgICAgICAgdHlwZTogJ3dhcm5pbmcnCiAgICAgIH0pLnRoZW4oKCkgPT4gewogICAgICAgIGdvb2RzUHJvcGVydHkuZGVsKGlkcykudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgLy8g6YeN5paw6I635Y+W5pWw5o2uCiAgICAgICAgICB0aGlzLmdldERhdGFzKCkKICAgICAgICAgIHRoaXMuZ2V0UHJvcGVydGllcygpCiAgICAgICAgfSkuY2F0Y2gocmVqZWN0ID0+IHsKICAgICAgICB9KQogICAgICB9KQogICAgfSwKICAgIGNyZWF0ZUZpbHRlckNvbG91cihxdWVyeVN0cmluZykgewogICAgICByZXR1cm4gKGdvb2RzQ29sb3VyKSA9PiB7CiAgICAgICAgcmV0dXJuIChnb29kc0NvbG91ci52YWx1ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YocXVlcnlTdHJpbmcudG9Mb3dlckNhc2UoKSkgIT09IC0xKQogICAgICB9CiAgICB9LAogICAgcXVlcnlTZWFyY2hDb2xvdXIocXVlcnlTdHJpbmcsIGNiKSB7CiAgICAgIHRoaXMuZ29vZHNDb2xvdXJzTGlzdCA9IFtdCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nb29kc0NvbG91cnMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLmdvb2RzQ29sb3Vyc0xpc3QucHVzaCh7ICd2YWx1ZSc6IHRoaXMuZ29vZHNDb2xvdXJzW2ldLm5hbWUgfSkKICAgICAgfQogICAgICB2YXIgZ29vZHNDb2xvdXJzTGlzdCA9IHRoaXMuZ29vZHNDb2xvdXJzTGlzdAogICAgICB2YXIgcmVzdWx0cyA9IHF1ZXJ5U3RyaW5nID8gZ29vZHNDb2xvdXJzTGlzdC5maWx0ZXIodGhpcy5jcmVhdGVGaWx0ZXJDb2xvdXIocXVlcnlTdHJpbmcpKSA6IGdvb2RzQ29sb3Vyc0xpc3QKICAgICAgLy8g6LCD55SoIGNhbGxiYWNrIOi/lOWbnuW7uuiuruWIl+ihqOeahOaVsOaNrgogICAgICBjYihyZXN1bHRzKQogICAgfSwKICAgIGNyZWF0ZUZpbHRlclVuaXQocXVlcnlTdHJpbmcpIHsKICAgICAgcmV0dXJuIChnb29kc1VuaXQpID0+IHsKICAgICAgICByZXR1cm4gKGdvb2RzVW5pdC52YWx1ZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YocXVlcnlTdHJpbmcudG9Mb3dlckNhc2UoKSkgIT09IC0xKQogICAgICB9CiAgICB9LAogICAgcXVlcnlTZWFyY2hVbml0KHF1ZXJ5U3RyaW5nLCBjYikgewogICAgICB0aGlzLmdvb2RzVW5pdHNMaXN0ID0gW10KICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmdvb2RzVW5pdHMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLmdvb2RzVW5pdHNMaXN0LnB1c2goeyAndmFsdWUnOiB0aGlzLmdvb2RzVW5pdHNbaV0ubmFtZSB9KQogICAgICB9CiAgICAgIHZhciBnb29kc1VuaXRzTGlzdCA9IHRoaXMuZ29vZHNVbml0c0xpc3QKICAgICAgdmFyIHJlc3VsdHMgPSBxdWVyeVN0cmluZyA/IGdvb2RzVW5pdHNMaXN0LmZpbHRlcih0aGlzLmNyZWF0ZUZpbHRlclVuaXQocXVlcnlTdHJpbmcpKSA6IGdvb2RzVW5pdHNMaXN0CiAgICAgIC8vIOiwg+eUqCBjYWxsYmFjayDov5Tlm57lu7rorq7liJfooajnmoTmlbDmja4KICAgICAgY2IocmVzdWx0cykKICAgIH0sCiAgICBoYW5kbGVTZWxlY3QoaXRlbSkgewogICAgICBjb25zb2xlLmxvZyhpdGVtKQogICAgfSwKICAgIGhhbmRsZUFkZCgpIHsKICAgICAgdGhpcy5hZGQuZGlhbG9nLnZpc2libGUgPSB0cnVlCiAgICB9LAogICAgYWRkUHJvcGVydHkoKSB7CiAgICAgIGdvb2RzUHJvcGVydHkuY3JlYXRlKHRoaXMuYWRkLm1vZGVscykudGhlbihyZXNwb25zZSA9PiB7CiAgICAgIC8vIOS4uuaWueS+v+i/nue7rea3u+WKoO+8jGNyZWF0ZeWvueivneahhuS4jeWFs+mXrQogICAgICAvLyDph43mlrDojrflj5bmlbDmja4KICAgICAgICB0aGlzLmdldERhdGFzKCkKICAgICAgICB0aGlzLmdldFByb3BlcnRpZXMoKQogICAgICB9KS5jYXRjaChyZWplY3QgPT4gewogICAgICB9KQogICAgfSwKICAgIGhhbmRsZUV4cG9ydCgpIHsKICAgICAgdGhpcy5sb2FkaW5nLmV4cG9ydCA9IHRydWUKICAgICAgZ29vZHNDYXRlZ29yeS5leHBvcnRFeGNlbCh0aGlzLnF1ZXJ5LCB0aGlzLnBhZ2UsIHRoaXMuc29ydCkudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtyZXNwb25zZV0pCiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSAn6LSn54mp57G75YirLnhscycKICAgICAgICBjb25zdCBlbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKQogICAgICAgIGVsaW5rLm9ubG9hZCA9ICgpID0+IHsgVVJMLnJldm9rZU9iamVjdFVSTChlbGluay5ocmVmKSB9CiAgICAgICAgZWxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZQogICAgICAgIGVsaW5rLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScKICAgICAgICBlbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKQogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxpbmspCiAgICAgICAgZWxpbmsuY2xpY2soKQogICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxpbmspCiAgICAgICAgdGhpcy5sb2FkaW5nLmV4cG9ydCA9IGZhbHNlCiAgICAgIH0pLmNhdGNoKHJlamVjdCA9PiB7CiAgICAgICAgdGhpcy5sb2FkaW5nLmV4cG9ydCA9IGZhbHNlCiAgICAgIH0pCiAgICB9CiAgfQp9Cg=="},null]}