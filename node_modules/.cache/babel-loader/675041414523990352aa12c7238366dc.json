{"remainingRequest":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\src\\permission.js","dependencies":[{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\src\\permission.js","mtime":1593517268940},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\rescue_web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCJDOi9Vc2Vycy9OZWFsIFdhbmcvSWRlYVByb2plY3RzL3Jlc2N1ZV93ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iik7Cgp2YXIgX29iamVjdFNwcmVhZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkM6L1VzZXJzL05lYWwgV2FuZy9JZGVhUHJvamVjdHMvcmVzY3VlX3dlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQyIikpOwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIik7Cgp2YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJDOi9Vc2Vycy9OZWFsIFdhbmcvSWRlYVByb2plY3RzL3Jlc2N1ZV93ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciIpKTsKCnZhciBfcm91dGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3JvdXRlciIpKTsKCnZhciBfc3RvcmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vc3RvcmUiKSk7Cgp2YXIgX2VsZW1lbnRVaSA9IHJlcXVpcmUoImVsZW1lbnQtdWkiKTsKCnZhciBfbnByb2dyZXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJucHJvZ3Jlc3MiKSk7CgpyZXF1aXJlKCJucHJvZ3Jlc3MvbnByb2dyZXNzLmNzcyIpOwoKdmFyIF9hdXRoID0gcmVxdWlyZSgiQC91dGlscy9hdXRoIik7CgovLyBwcm9ncmVzcyBiYXIKLy8gcHJvZ3Jlc3MgYmFyIHN0eWxlCi8vIGdldCB0b2tlbiBmcm9tIGNvb2tpZQovLyBpbXBvcnQgZ2V0UGFnZVRpdGxlIGZyb20gJ0AvdXRpbHMvZ2V0LXBhZ2UtdGl0bGUnCl9ucHJvZ3Jlc3MuZGVmYXVsdC5jb25maWd1cmUoewogIHNob3dTcGlubmVyOiBmYWxzZQp9KTsgLy8gTlByb2dyZXNzIENvbmZpZ3VyYXRpb24KCgp2YXIgd2hpdGVMaXN0ID0gWycvbG9naW4nLCAnL2F1dGgtcmVkaXJlY3QnXTsgLy8gbm8gcmVkaXJlY3Qgd2hpdGVsaXN0Cgpfcm91dGVyLmRlZmF1bHQuYmVmb3JlRWFjaCggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjIuZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHRvLCBmcm9tLCBuZXh0KSB7CiAgICB2YXIgaGFzVG9rZW4sIF95aWVsZCRzdG9yZSRkaXNwYXRjaCwgYWNjZXNzLCBhY2Nlc3NSb3V0ZXM7CgogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAvLyBzdGFydCBwcm9ncmVzcyBiYXIKICAgICAgICAgICAgX25wcm9ncmVzcy5kZWZhdWx0LnN0YXJ0KCk7IC8vIGRldGVybWluZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBsb2dnZWQgaW4KCgogICAgICAgICAgICBoYXNUb2tlbiA9ICgwLCBfYXV0aC5nZXRUb2tlbikoKTsKCiAgICAgICAgICAgIGlmICghaGFzVG9rZW4pIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghKHRvLnBhdGggPT09ICcvbG9naW4nKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBpZiBpcyBsb2dnZWQgaW4sIHJlZGlyZWN0IHRvIHRoZSBob21lIHBhZ2UKICAgICAgICAgICAgbmV4dCh7CiAgICAgICAgICAgICAgcGF0aDogJy8nCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgX25wcm9ncmVzcy5kZWZhdWx0LmRvbmUoKTsKCiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICBpZiAoIV9zdG9yZS5kZWZhdWx0LmdldHRlcnMuYWNjZXNzKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDEyOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7CiAgICAgICAgICAgIHJldHVybiBfc3RvcmUuZGVmYXVsdC5kaXNwYXRjaCgnYWNjb3VudC9nZXRBY2Nlc3MnKTsKCiAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICBfeWllbGQkc3RvcmUkZGlzcGF0Y2ggPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBhY2Nlc3MgPSBfeWllbGQkc3RvcmUkZGlzcGF0Y2guYWNjZXNzOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTk7CiAgICAgICAgICAgIHJldHVybiBfc3RvcmUuZGVmYXVsdC5kaXNwYXRjaCgncGVybWlzc2lvbi9nZW5lcmF0ZVJvdXRlcycsIGFjY2Vzcyk7CgogICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgYWNjZXNzUm91dGVzID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgIC8vIGR5bmFtaWNhbGx5IGFkZCBhY2Nlc3NpYmxlIHJvdXRlcwogICAgICAgICAgICBfcm91dGVyLmRlZmF1bHQuYWRkUm91dGVzKGFjY2Vzc1JvdXRlcyk7IC8vIGhhY2sgbWV0aG9kIHRvIGVuc3VyZSB0aGF0IGFkZFJvdXRlcyBpcyBjb21wbGV0ZQogICAgICAgICAgICAvLyBzZXQgdGhlIHJlcGxhY2U6IHRydWUsIHNvIHRoZSBuYXZpZ2F0aW9uIHdpbGwgbm90IGxlYXZlIGEgaGlzdG9yeSByZWNvcmQKCgogICAgICAgICAgICBuZXh0KCgwLCBfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSgoMCwgX29iamVjdFNwcmVhZDIuZGVmYXVsdCkoe30sIHRvKSwge30sIHsKICAgICAgICAgICAgICByZXBsYWNlOiB0cnVlCiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMxOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjQ7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMTIpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjg7CiAgICAgICAgICAgIHJldHVybiBfc3RvcmUuZGVmYXVsdC5kaXNwYXRjaCgnYWNjb3VudC9yZXNldFRva2VuJyk7CgogICAgICAgICAgY2FzZSAyODoKICAgICAgICAgICAgX2VsZW1lbnRVaS5NZXNzYWdlLmVycm9yKF9jb250ZXh0LnQwIHx8ICdIYXMgRXJyb3InKTsKCiAgICAgICAgICAgIG5leHQoIi9sb2dpbj9yZWRpcmVjdD0iLmNvbmNhdCh0by5wYXRoKSk7CgogICAgICAgICAgICBfbnByb2dyZXNzLmRlZmF1bHQuZG9uZSgpOwoKICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNDsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAzMzoKICAgICAgICAgICAgLyogaGFzIG5vIHRva2VuKi8KICAgICAgICAgICAgaWYgKHdoaXRlTGlzdC5pbmRleE9mKHRvLnBhdGgpICE9PSAtMSkgewogICAgICAgICAgICAgIC8vIGluIHRoZSBmcmVlIGxvZ2luIHdoaXRlbGlzdCwgZ28gZGlyZWN0bHkKICAgICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gb3RoZXIgcGFnZXMgdGhhdCBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyBhcmUgcmVkaXJlY3RlZCB0byB0aGUgbG9naW4gcGFnZS4KICAgICAgICAgICAgICBuZXh0KCIvbG9naW4/cmVkaXJlY3Q9Ii5jb25jYXQodG8ucGF0aCkpOwoKICAgICAgICAgICAgICBfbnByb2dyZXNzLmRlZmF1bHQuZG9uZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgY2FzZSAzNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEyLCAyNF1dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MiwgX3gzKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKSk7Cgpfcm91dGVyLmRlZmF1bHQuYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHsKICAvLyBmaW5pc2ggcHJvZ3Jlc3MgYmFyCiAgX25wcm9ncmVzcy5kZWZhdWx0LmRvbmUoKTsKfSk7"},{"version":3,"sources":["C:/Users/Neal Wang/IdeaProjects/rescue_web/src/permission.js"],"names":["NProgress","configure","showSpinner","whiteList","router","beforeEach","to","from","next","start","hasToken","path","done","store","getters","access","dispatch","accessRoutes","addRoutes","replace","Message","error","indexOf","afterEach"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAFkC;AACD;AACO;AACxC;AAEAA,mBAAUC,SAAV,CAAoB;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAApB,E,CAA4C;;;AAE5C,IAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,gBAAX,CAAlB,C,CAA+C;;AAE/CC,gBAAOC,UAAP;AAAA,mFAAkB,iBAAMC,EAAN,EAAUC,IAAV,EAAgBC,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChB;AACAR,+BAAUS,KAAV,GAFgB,CAIhB;;;AACMC,YAAAA,QALU,GAKC,qBALD;;AAAA,iBAOZA,QAPY;AAAA;AAAA;AAAA;;AAAA,kBAQVJ,EAAE,CAACK,IAAH,KAAY,QARF;AAAA;AAAA;AAAA;;AASZ;AACAH,YAAAA,IAAI,CAAC;AAAEG,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAJ;;AACAX,+BAAUY,IAAV;;AAXY;AAAA;;AAAA;AAAA,iBAcRC,eAAMC,OAAN,CAAcC,MAdN;AAAA;AAAA;AAAA;;AAeVP,YAAAA,IAAI;AAfM;AAAA;;AAAA;AAAA;AAAA;AAAA,mBAmBiBK,eAAMG,QAAN,CAAe,mBAAf,CAnBjB;;AAAA;AAAA;AAmBAD,YAAAA,MAnBA,yBAmBAA,MAnBA;AAAA;AAAA,mBAsBmBF,eAAMG,QAAN,CAAe,2BAAf,EAA4CD,MAA5C,CAtBnB;;AAAA;AAsBFE,YAAAA,YAtBE;;AAwBR;AACAb,4BAAOc,SAAP,CAAiBD,YAAjB,EAzBQ,CA2BR;AACA;;;AACAT,YAAAA,IAAI,6DAAMF,EAAN;AAAUa,cAAAA,OAAO,EAAE;AAAnB,eAAJ;AA7BQ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAgCFN,eAAMG,QAAN,CAAe,oBAAf,CAhCE;;AAAA;AAiCRI,+BAAQC,KAAR,CAAc,eAAS,WAAvB;;AACAb,YAAAA,IAAI,2BAAoBF,EAAE,CAACK,IAAvB,EAAJ;;AACAX,+BAAUY,IAAV;;AAnCQ;AAAA;AAAA;;AAAA;AAwCd;AAEA,gBAAIT,SAAS,CAACmB,OAAV,CAAkBhB,EAAE,CAACK,IAArB,MAA+B,CAAC,CAApC,EAAuC;AACrC;AACAH,cAAAA,IAAI;AACL,aAHD,MAGO;AACL;AACAA,cAAAA,IAAI,2BAAoBF,EAAE,CAACK,IAAvB,EAAJ;;AACAX,iCAAUY,IAAV;AACD;;AAjDa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;;AAqDAR,gBAAOmB,SAAP,CAAiB,YAAM;AACrB;AACAvB,qBAAUY,IAAV;AACD,CAHD","sourcesContent":["import router from './router'\r\nimport store from './store'\r\nimport { Message } from 'element-ui'\r\nimport NProgress from 'nprogress' // progress bar\r\nimport 'nprogress/nprogress.css' // progress bar style\r\nimport { getToken } from '@/utils/auth' // get token from cookie\r\n// import getPageTitle from '@/utils/get-page-title'\r\n\r\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\r\n\r\nconst whiteList = ['/login', '/auth-redirect'] // no redirect whitelist\r\n\r\nrouter.beforeEach(async(to, from, next) => {\r\n  // start progress bar\r\n  NProgress.start()\r\n\r\n  // determine whether the user has logged in\r\n  const hasToken = getToken()\r\n\r\n  if (hasToken) {\r\n    if (to.path === '/login') {\r\n      // if is logged in, redirect to the home page\r\n      next({ path: '/' })\r\n      NProgress.done()\r\n    } else {\r\n      // determine whether the user has obtained his permission roles through getAccess\r\n      if (store.getters.access) {\r\n        next()\r\n      } else {\r\n        try {\r\n          // get access\r\n          const { access } = await store.dispatch('account/getAccess')\r\n\r\n          // generate accessible routes map based on access\r\n          const accessRoutes = await store.dispatch('permission/generateRoutes', access)\r\n\r\n          // dynamically add accessible routes\r\n          router.addRoutes(accessRoutes)\r\n\r\n          // hack method to ensure that addRoutes is complete\r\n          // set the replace: true, so the navigation will not leave a history record\r\n          next({ ...to, replace: true })\r\n        } catch (error) {\r\n          // remove token and go to login page to re-login\r\n          await store.dispatch('account/resetToken')\r\n          Message.error(error || 'Has Error')\r\n          next(`/login?redirect=${to.path}`)\r\n          NProgress.done()\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    /* has no token*/\r\n\r\n    if (whiteList.indexOf(to.path) !== -1) {\r\n      // in the free login whitelist, go directly\r\n      next()\r\n    } else {\r\n      // other pages that do not have permission to access are redirected to the login page.\r\n      next(`/login?redirect=${to.path}`)\r\n      NProgress.done()\r\n    }\r\n  }\r\n})\r\n\r\nrouter.afterEach(() => {\r\n  // finish progress bar\r\n  NProgress.done()\r\n})\r\n"]}]}