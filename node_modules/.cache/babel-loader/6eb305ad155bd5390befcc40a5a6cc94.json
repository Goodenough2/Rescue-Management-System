{"remainingRequest":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\src\\views\\order-business\\order.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\src\\views\\order-business\\order.vue","mtime":1596181631322},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkM6L1VzZXJzL05lYWwgV2FuZy9JZGVhUHJvamVjdHMvbWluZ3hpbl93ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydCI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBhZGFwdGl2ZSBmcm9tICdAL2RpcmVjdGl2ZS9lbC10YWJsZSc7CmltcG9ydCBzZXRSdWxlIGZyb20gJ0AvdXRpbHMvZm9ybS12YWxpZGF0ZSc7CmltcG9ydCBQYWdpbmF0aW9uIGZyb20gJ0AvY29tcG9uZW50cy9QYWdpbmF0aW9uJzsKaW1wb3J0ICogYXMgb3JkZXIgZnJvbSAnQC9hcGkvb3JkZXItbWFuYWdlL29yZGVyJzsKaW1wb3J0ICogYXMgY3VzdG9tZXIgZnJvbSAnQC9hcGkvb3JkZXItbWFuYWdlL2N1c3RvbWVyJzsKaW1wb3J0ICogYXMgdXNlciBmcm9tICdAL2FwaS9zeXN0ZW0tbWFuYWdlL3VzZXInOwppbXBvcnQgKiBhcyBvcmRlclByb3BlcnR5IGZyb20gJ0AvYXBpL29yZGVyLW1hbmFnZS9vcmRlci1wcm9wZXJ0eSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnT3JkZXInLAogIGNvbXBvbmVudHM6IHsKICAgIFBhZ2luYXRpb246IFBhZ2luYXRpb24KICB9LAogIGRpcmVjdGl2ZXM6IHsKICAgIGFkYXB0aXZlOiBhZGFwdGl2ZQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGFjY2VzczogdGhpcy4kc3RvcmUuZ2V0dGVycy5hY2Nlc3NbJ09yZGVyQnVzaW5lc3MnXVsnT3JkZXInXSwKICAgICAgZGF0YXM6IG51bGwsCiAgICAgIGN1c3RvbWVyczogbnVsbCwKICAgICAgY3JlYXRlcnM6IG51bGwsCiAgICAgIG9yZGVyUHJvcGVydGllczogbnVsbCwKICAgICAgT3JkZXJQcm9wZXJ0eVZhbHVlOiBbXSwKICAgICAgdmFsdWUxOiBbXSwKICAgICAgcXVlcnk6IHsKICAgICAgICBjb2RlOiBudWxsLAogICAgICAgIG5hbWU6IG51bGwsCiAgICAgICAgY3VzdG9tZXJJZDogbnVsbCwKICAgICAgICBjcmVhdGVySWQ6IG51bGwsCiAgICAgICAgc3RhdHVzOiBudWxsCiAgICAgIH0sCiAgICAgIHBhZ2U6IHsKICAgICAgICB0b3RhbDogMCwKICAgICAgICBjdXJyZW50OiAxLAogICAgICAgIHNpemU6IDIwCiAgICAgIH0sCiAgICAgIHNvcnQ6IHsKICAgICAgICBwcm9wOiAnc29ydCcsCiAgICAgICAgb3JkZXI6ICdhc2NlbmRpbmcnCiAgICAgIH0sCiAgICAgIGRldGFpbDogewogICAgICAgIGRpYWxvZzogewogICAgICAgICAgdGl0bGU6ICforqLljZXlvZXlhaXkv6Hmga8nLAogICAgICAgICAgdmlzaWJsZTogZmFsc2UsCiAgICAgICAgICBsYWJlbFdpZHRoOiAnMTUwcHgnCiAgICAgICAgfSwKICAgICAgICBtb2RlbHM6IHsKICAgICAgICAgIGNvZGU6IG51bGwsCiAgICAgICAgICBuYW1lOiBudWxsLAogICAgICAgICAgY3VzdG9tZXI6IHsKICAgICAgICAgICAgbmFtZTogbnVsbAogICAgICAgICAgfSwKICAgICAgICAgIGNyZWF0ZXI6IHsKICAgICAgICAgICAgdXNlck5hbWU6IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICBhbW91bnQ6IG51bGwsCiAgICAgICAgICBhbW91bnREb25lOiBudWxsLAogICAgICAgICAgYW1vdW50UHJlOiBudWxsLAogICAgICAgICAgYW1vdW50UmVhbDogbnVsbCwKICAgICAgICAgIGRlbGl2ZXJ5VGltZTogbnVsbCwKICAgICAgICAgIGRlbGl2ZXJ5VEltZVJlYWw6IG51bGwsCiAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCwKICAgICAgICAgIHN0YXR1czogbnVsbCwKICAgICAgICAgIHN0YXR1c1RpbWU6IG51bGwsCiAgICAgICAgICBub25leGlzdGVudFByb3BlcnRpZXM6IFtdLAogICAgICAgICAgZXhpc3RlbnRQcm9wZXJ0aWVzOiBbXQogICAgICAgIH0KICAgICAgfSwKICAgICAgY3JlYXRlOiB7CiAgICAgICAgZGlhbG9nOiB7CiAgICAgICAgICB0aXRsZTogJ+a3u+WKoOiuouWNlScsCiAgICAgICAgICB2aXNpYmxlOiBmYWxzZSwKICAgICAgICAgIGxhYmVsV2lkdGg6ICcxNTBweCcKICAgICAgICB9LAogICAgICAgIG1vZGVsczogewogICAgICAgICAgb3JkZXI6IHsKICAgICAgICAgICAgY29kZTogbnVsbCwKICAgICAgICAgICAgbmFtZTogbnVsbCwKICAgICAgICAgICAgY3VzdG9tZXJJZDogbnVsbCwKICAgICAgICAgICAgYW1vdW50OiBudWxsLAogICAgICAgICAgICBhbW91bnRQcmU6IG51bGwsCiAgICAgICAgICAgIGRlbGl2ZXJ5VGltZTogbnVsbCwKICAgICAgICAgICAgZGVzY3JpcHRpb246IG51bGwKICAgICAgICAgIH0sCiAgICAgICAgICBvcmRlclByb3BlcnR5VmFsdWU6IFtdCiAgICAgICAgfSwKICAgICAgICBydWxlczogewogICAgICAgICAgb3JkZXI6IHsKICAgICAgICAgICAgY29kZTogc2V0UnVsZSgn6K6i5Y2V57yW5Y+3JywgW3sKICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgbGVuZ3RoOiBbMCwgMzJdCiAgICAgICAgICAgIH1dKSwKICAgICAgICAgICAgbmFtZTogc2V0UnVsZSgn6K6i5Y2V5ZCN56ewJywgW3sKICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgbGVuZ3RoOiBbMCwgMjU1XQogICAgICAgICAgICB9XSksCiAgICAgICAgICAgIGN1c3RvbWVySWQ6IHNldFJ1bGUoJ+WuouaItycsIFt7CiAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHRydWUKICAgICAgICAgICAgfV0pLAogICAgICAgICAgICBhbW91bnQ6IHNldFJ1bGUoJ+iuouWNleaIkOS6pOmHkeminScsIFt7CiAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICAgICAgfV0pLAogICAgICAgICAgICBhbW91bnRQcmU6IHNldFJ1bGUoJ+iuouWNlemihOS7mOmHkeminScsIFt7CiAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICAgICAgfV0pLAogICAgICAgICAgICBkZWxpdmVyeVRpbWU6IHNldFJ1bGUoJ+iuouWNleS6pOi0p+aXtumXtCcsIFt7CiAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgICAgICAgfV0pCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICB1cGRhdGU6IHsKICAgICAgICBkaWFsb2c6IHsKICAgICAgICAgIHRpdGxlOiAn57yW6L6R6K6i5Y2V5L+h5oGvJywKICAgICAgICAgIHZpc2libGU6IGZhbHNlLAogICAgICAgICAgbGFiZWxXaWR0aDogJzEyMHB4JwogICAgICAgIH0sCiAgICAgICAgbW9kZWxzOiB7CiAgICAgICAgICBjb2RlOiBudWxsLAogICAgICAgICAgY3VzdG9tZXJJZDogbnVsbCwKICAgICAgICAgIGNyZWF0ZXJJZDogbnVsbCwKICAgICAgICAgIGFtb3VudDogbnVsbCwKICAgICAgICAgIGFtb3VudFByZTogbnVsbCwKICAgICAgICAgIGRlbGl2ZXJ5VGltZTogbnVsbCwKICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLAogICAgICAgICAgZXhpc3RlbnRQcm9wZXJ0aWVzOiBbXSwKICAgICAgICAgIG5vbmV4aXN0ZW50UHJvcGVydGllczogW10KICAgICAgICB9LAogICAgICAgIHJ1bGVzOiB7CiAgICAgICAgICBjb2RlOiBzZXRSdWxlKCforqLljZXnsbvlnovnvJblj7cnLCBbewogICAgICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgICAgfSwgewogICAgICAgICAgICBsZW5ndGg6IFswLCAzMl0KICAgICAgICAgIH1dKSwKICAgICAgICAgIGN1c3RvbWVySWQ6IHNldFJ1bGUoJ+WuouaItycsIFt7CiAgICAgICAgICAgIHNlbGVjdGVkOiB0cnVlCiAgICAgICAgICB9XSksCiAgICAgICAgICBhbW91bnQ6IHNldFJ1bGUoJ+iuouWNleaIkOS6pOmHkeminScsIFt7CiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgICB9XSksCiAgICAgICAgICBhbW91bnRQcmU6IHNldFJ1bGUoJ+iuouWNlemihOS7mOmHkeminScsIFt7CiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgICB9XSksCiAgICAgICAgICBkZWxpdmVyeVRpbWU6IHNldFJ1bGUoJ+iuouWNleS6pOi0p+aXtumXtCcsIFt7CiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgICB9XSkKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGFkZDogewogICAgICAgIGRpYWxvZzogewogICAgICAgICAgdGl0bGU6ICfmlrDlop7mianlsZXlsZ7mgKcnLAogICAgICAgICAgdmlzaWJsZTogZmFsc2UsCiAgICAgICAgICBsYWJlbFdpZHRoOiAnMTUwcHgnCiAgICAgICAgfSwKICAgICAgICBtb2RlbHM6IHsKICAgICAgICAgIG5hbWU6IG51bGwsCiAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbAogICAgICAgIH0sCiAgICAgICAgcnVsZXM6IHsKICAgICAgICAgIG5hbWU6IHNldFJ1bGUoJ+aJqeWxleWxnuaAp+WQjeensCcsIFt7CiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGxlbmd0aDogWzAsIDI1NV0KICAgICAgICAgIH1dKQogICAgICAgIH0KICAgICAgfSwKICAgICAgbG9hZGluZzogewogICAgICAgIGxpc3Q6IHRydWUsCiAgICAgICAgZXhwb3J0OiBmYWxzZSwKICAgICAgICBkZXRhaWw6IGZhbHNlLAogICAgICAgIHVwZGF0ZTogZmFsc2UKICAgICAgfSwKICAgICAgc29ydE9yZGVyczogWydhc2NlbmRpbmcnLCAnZGVzY2VuZGluZyddCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0RGF0YXMoKTsKICAgIHRoaXMuZ2V0Q3VzdG9tZXJzKCk7CiAgICB0aGlzLmdldFVzZXJzKCk7CiAgICB0aGlzLmdldE9yZGVyUHJvcGVydGllcygpOwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0Q3VzdG9tZXJzOiBmdW5jdGlvbiBnZXRDdXN0b21lcnMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjdXN0b21lci5nZXRsaXN0KCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpcy5jdXN0b21lcnMgPSByZXNwb25zZS5kYXRhOwogICAgICAgIF90aGlzLmxvYWRpbmcuZGV0YWlsID0gZmFsc2U7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWplY3QpIHsKICAgICAgICBfdGhpcy5sb2FkaW5nLmRldGFpbCA9IGZhbHNlOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRVc2VyczogZnVuY3Rpb24gZ2V0VXNlcnMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdXNlci5nZXRsaXN0KCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBfdGhpczIuY3JlYXRlcnMgPSByZXNwb25zZS5kYXRhOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVqZWN0KSB7fSk7CiAgICB9LAogICAgZ2V0T3JkZXJQcm9wZXJ0aWVzOiBmdW5jdGlvbiBnZXRPcmRlclByb3BlcnRpZXMoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIG9yZGVyVHlwZSA9IDA7CiAgICAgIG9yZGVyUHJvcGVydHkuZ2V0bGlzdChvcmRlclR5cGUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXMzLm9yZGVyUHJvcGVydGllcyA9IHJlc3BvbnNlLmRhdGE7IC8vIOWIneWni+WMlk9yZGVyUHJvcGVydHlWYWx1ZSDmlbDnu4TvvIzmr4/mnaHmlbDmja7kvp3mrKHotYvkuIpwcm9wZXJ0eUlk55qE5YC8CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UuZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgX3RoaXMzLk9yZGVyUHJvcGVydHlWYWx1ZS5wdXNoKHsKICAgICAgICAgICAgdmFsdWU6IG51bGwsCiAgICAgICAgICAgIHByb3BlcnR5SWQ6IG51bGwKICAgICAgICAgIH0pOwoKICAgICAgICAgIF90aGlzMy5PcmRlclByb3BlcnR5VmFsdWVbaV0ucHJvcGVydHlJZCA9IHJlc3BvbnNlLmRhdGFbaV0uaWQ7CiAgICAgICAgfQoKICAgICAgICBfdGhpczMubG9hZGluZy5kZXRhaWwgPSBmYWxzZTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlamVjdCkgewogICAgICAgIF90aGlzMy5sb2FkaW5nLmRldGFpbCA9IGZhbHNlOwogICAgICB9KTsKICAgIH0sCiAgICBnZXREYXRhczogZnVuY3Rpb24gZ2V0RGF0YXMoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdGhpcy5sb2FkaW5nLmxpc3QgPSB0cnVlOwogICAgICBvcmRlci5nZXRMaXN0KHRoaXMucXVlcnksIHRoaXMucGFnZSwgdGhpcy5zb3J0KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzNC5kYXRhcyA9IHJlc3BvbnNlLmRhdGEuaXRlbXM7CiAgICAgICAgX3RoaXM0LnBhZ2UudG90YWwgPSByZXNwb25zZS5kYXRhLnRvdGFsOwogICAgICAgIF90aGlzNC5sb2FkaW5nLmxpc3QgPSBmYWxzZTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlamVjdCkgewogICAgICAgIF90aGlzNC5sb2FkaW5nLmxpc3QgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0VGltZTogZnVuY3Rpb24gZ2V0VGltZShkYXRldGltZXJhbmdlKSB7CiAgICAgIHRoaXMucXVlcnkubG9naW5UaW1lID0gdGhpcy52YWx1ZTFbMF07CiAgICAgIHRoaXMucXVlcnkubG9naW5PdXRUaW1lID0gdGhpcy52YWx1ZTFbMV07CiAgICB9LAogICAgaGFuZGxlUXVlcnk6IGZ1bmN0aW9uIGhhbmRsZVF1ZXJ5KCkgewogICAgICB0aGlzLnBhZ2UuY3VycmVudCA9IDE7CiAgICAgIHRoaXMuZ2V0RGF0YXMoKTsKICAgIH0sCiAgICBoYW5kbGVTb3J0OiBmdW5jdGlvbiBoYW5kbGVTb3J0KGRhdGEpIHsKICAgICAgdGhpcy5zb3J0LnByb3AgPSBkYXRhLnByb3A7CiAgICAgIHRoaXMuc29ydC5vcmRlciA9IGRhdGEub3JkZXI7CiAgICAgIHRoaXMuZ2V0RGF0YXMoKTsKICAgIH0sCiAgICBoYW5kbGVDbGVhbjogZnVuY3Rpb24gaGFuZGxlQ2xlYW4oKSB7CiAgICAgIHRoaXMuY3JlYXRlLm1vZGVscy5vcmRlci5wcm9wZXJ0eUlkID0gbnVsbDsKICAgIH0sCiAgICBoYW5kbGVEZXRhaWw6IGZ1bmN0aW9uIGhhbmRsZURldGFpbChyb3cpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICAvLyDoi6XliJfooajmlbDmja7lsZXnpLrkuoblhajpg6jlsZ7mgKfvvIzliJnlj6/nm7TmjqXmi7fotJ3liJfooajmlbDmja4KICAgICAgLy8gdGhpcy5kZXRhaWwubW9kZWxzID0gT2JqZWN0LmFzc2lnbih7fSwgcm93KQogICAgICB0aGlzLmRldGFpbC5kaWFsb2cudmlzaWJsZSA9IHRydWU7CiAgICAgIHRoaXMubG9hZGluZy5kZXRhaWwgPSB0cnVlOwogICAgICBvcmRlci5nZXQocm93LmlkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIF90aGlzNS5kZXRhaWwubW9kZWxzID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICBjb25zb2xlLmxvZyhfdGhpczUuZGV0YWlsLm1vZGVscyk7CiAgICAgICAgX3RoaXM1LmxvYWRpbmcuZGV0YWlsID0gZmFsc2U7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWplY3QpIHsKICAgICAgICBfdGhpczUubG9hZGluZy5kZXRhaWwgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlQ3JlYXRlQ3VzdG9tZXI6IGZ1bmN0aW9uIGhhbmRsZUNyZWF0ZUN1c3RvbWVyKCkgewogICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7CiAgICAgICAgcGF0aDogJy9vcmRlci1tYW5hZ2UvY3VzdG9tZXInLAogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBmbGFnOiB0cnVlCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBoYW5kbGVDcmVhdGVEZXRhaWw6IGZ1bmN0aW9uIGhhbmRsZUNyZWF0ZURldGFpbChyb3cpIHsKICAgICAgdmFyIG9yZGVySWQgPSByb3cuaWQ7CiAgICAgIHZhciBvcmRlckNvZGUgPSByb3cuY29kZTsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICcvb3JkZXItbWFuYWdlL29yZGVyLWRldGFpbCcsCiAgICAgICAgcXVlcnk6IHsKICAgICAgICAgIG9yZGVyQ29kZTogb3JkZXJDb2RlLAogICAgICAgICAgb3JkZXJJZDogb3JkZXJJZAogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlQ3JlYXRlUmVxdWVzdDogZnVuY3Rpb24gaGFuZGxlQ3JlYXRlUmVxdWVzdChyb3cpIHsKICAgICAgdmFyIG9yZGVySWQgPSByb3cuaWQ7CiAgICAgIHZhciBvcmRlckNvZGUgPSByb3cuY29kZTsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goewogICAgICAgIHBhdGg6ICcvZ29vZHMtbWFuYWdlL3JlcXVlc3QnLAogICAgICAgIHF1ZXJ5OiB7CiAgICAgICAgICBvcmRlcklkOiBvcmRlcklkLAogICAgICAgICAgb3JkZXJDb2RlOiBvcmRlckNvZGUKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIGhhbmRsZUNyZWF0ZTogZnVuY3Rpb24gaGFuZGxlQ3JlYXRlKCkgewogICAgICB0aGlzLmNyZWF0ZS5kaWFsb2cudmlzaWJsZSA9IHRydWU7CiAgICB9LAogICAgaGFuZGxlQWRkOiBmdW5jdGlvbiBoYW5kbGVBZGQoKSB7CiAgICAgIHRoaXMuYWRkLmRpYWxvZy52aXNpYmxlID0gdHJ1ZTsKICAgIH0sCiAgICBjcmVhdGVEYXRhOiBmdW5jdGlvbiBjcmVhdGVEYXRhKCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIHRoaXMuJHJlZnNbJ2Zvcm1DcmVhdGUnXS52YWxpZGF0ZShmdW5jdGlvbiAodmFsaWQpIHsKICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgX3RoaXM2LmNyZWF0ZS5tb2RlbHMub3JkZXJQcm9wZXJ0eVZhbHVlID0gW107CiAgICAgICAgX3RoaXM2LmNyZWF0ZS5tb2RlbHMub3JkZXJQcm9wZXJ0eVZhbHVlID0gX3RoaXM2Lk9yZGVyUHJvcGVydHlWYWx1ZS5jb25jYXQoX3RoaXM2LmNyZWF0ZS5tb2RlbHMub3JkZXJQcm9wZXJ0eVZhbHVlKTsKICAgICAgICBvcmRlci5jcmVhdGUoX3RoaXM2LmNyZWF0ZS5tb2RlbHMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAvLyDkuLrmlrnkvr/ov57nu63mt7vliqDvvIxjcmVhdGXlr7nor53moYbkuI3lhbPpl60KICAgICAgICAgIC8vIOmcgOimgea4heepuueahOihqOWNle+8jOaJi+WKqOa4heepuu+8jOiHs+Wwkea4heepuuS4gOS4quW/heWhq+mhue+8jOmYsuatoueCueWHu+S4pOmBjQogICAgICAgICAgX3RoaXM2LmNyZWF0ZS5tb2RlbHMub3JkZXIuY29kZSA9ICcnOwogICAgICAgICAgX3RoaXM2LmNyZWF0ZS5tb2RlbHMub3JkZXIuY3VzdG9tZXJJZCA9ICcnOyAvLyDph43mlrDojrflj5bmlbDmja4KCiAgICAgICAgICBfdGhpczYuZ2V0RGF0YXMoKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVqZWN0KSB7fSk7CiAgICAgIH0pOwogICAgfSwKICAgIGFkZFByb3BlcnR5OiBmdW5jdGlvbiBhZGRQcm9wZXJ0eSgpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICB2YXIgb3JkZXJUeXBlID0gMDsKICAgICAgb3JkZXJQcm9wZXJ0eS5hZGQob3JkZXJUeXBlLCB0aGlzLmFkZC5tb2RlbHMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgLy8g5Li65pa55L6/6L+e57ut5re75Yqg77yMY3JlYXRl5a+56K+d5qGG5LiN5YWz6ZetCiAgICAgICAgLy8g6YeN5paw6I635Y+W5pWw5o2uCiAgICAgICAgX3RoaXM3LmdldERhdGFzKCk7CgogICAgICAgIF90aGlzNy5nZXRPcmRlclByb3BlcnRpZXMoKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlamVjdCkge30pOwogICAgfSwKICAgIGhhbmRsZVVwZGF0ZTogZnVuY3Rpb24gaGFuZGxlVXBkYXRlKHJvdykgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIC8vIOiLpeWIl+ihqOaVsOaNruWxleekuuS6huWFqOmDqOWxnuaAp++8jOWImeWPr+ebtOaOpeaLt+i0neWIl+ihqOaVsOaNrueUqOS6jue8lui+kQogICAgICAvLyB0aGlzLnVwZGF0ZS5tb2RlbHMgPSBPYmplY3QuYXNzaWduKHt9LCByb3cpCiAgICAgIHRoaXMudXBkYXRlLmRpYWxvZy52aXNpYmxlID0gdHJ1ZTsKICAgICAgdGhpcy5sb2FkaW5nLnVwZGF0ZSA9IHRydWU7CiAgICAgIG9yZGVyLmdldChyb3cuaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgX3RoaXM4LnVwZGF0ZS5tb2RlbHMgPSByZXNwb25zZS5kYXRhOwogICAgICAgIF90aGlzOC5sb2FkaW5nLnVwZGF0ZSA9IGZhbHNlOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVqZWN0KSB7CiAgICAgICAgX3RoaXM4LmxvYWRpbmcudXBkYXRlID0gZmFsc2U7CiAgICAgIH0pOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXM4LiRyZWZzWydmb3JtVXBkYXRlJ10uY2xlYXJWYWxpZGF0ZSgpOwogICAgICB9KTsKICAgIH0sCiAgICB1cGRhdGVEYXRhOiBmdW5jdGlvbiB1cGRhdGVEYXRhKCkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIHRoaXMuJHJlZnNbJ2Zvcm1VcGRhdGUnXS52YWxpZGF0ZShmdW5jdGlvbiAodmFsaWQpIHsKICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgdmFyIHRlbXBEYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgX3RoaXM5LnVwZGF0ZS5tb2RlbHMpOwogICAgICAgIG9yZGVyLnVwZGF0ZSh0ZW1wRGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgIC8vIOmHjeaWsOiOt+WPluaVsOaNrgogICAgICAgICAgX3RoaXM5LmdldERhdGFzKCk7CgogICAgICAgICAgX3RoaXM5LnVwZGF0ZS5kaWFsb2cudmlzaWJsZSA9IGZhbHNlOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWplY3QpIHt9KTsKICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlRGVsZXRlOiBmdW5jdGlvbiBoYW5kbGVEZWxldGUocm93KSB7CiAgICAgIHRoaXMuZGVsZXRlRGF0YShbcm93LmlkXSk7CiAgICB9LAogICAgaGFuZGxlRGVsZXRlczogZnVuY3Rpb24gaGFuZGxlRGVsZXRlcyhyb3cpIHsKICAgICAgaWYgKHRoaXMuJHJlZnMubGlzdFRhYmxlLnNlbGVjdGlvbi5sZW5ndGggPT09IDApIHsKICAgICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJywKICAgICAgICAgIG1lc3NhZ2U6ICfor7flnKjkuIvpnaLooajmoLznmoTlt6bkvqfli77pgInpnIDopoHliKDpmaTnmoTmlbDmja4nLAogICAgICAgICAgZHVyYXRpb246IDQwMDAKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHZhciBpZHMgPSBbXTsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLiRyZWZzLmxpc3RUYWJsZS5zZWxlY3Rpb24pLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgaXRlbSA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgaWRzLnB1c2goaXRlbS5pZCk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHRoaXMuZGVsZXRlRGF0YShpZHMpOwogICAgfSwKICAgIGRlbGV0ZURhdGE6IGZ1bmN0aW9uIGRlbGV0ZURhdGEoaWRzKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIHRoaXMuJGNvbmZpcm0oJ+aVsOaNruWIoOmZpOWQju+8jOS4jeWPr+aBouWkjSwg5piv5ZCm57un57utPycsICfmj5DnpLonLCB7CiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponLAogICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLAogICAgICAgIHR5cGU6ICd3YXJuaW5nJwogICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBvcmRlci5kZWwoaWRzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgLy8g6YeN5paw6I635Y+W5pWw5o2uCiAgICAgICAgICBfdGhpczEwLmdldERhdGFzKCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlamVjdCkge30pOwogICAgICB9KTsKICAgIH0sCiAgICBkZWxldGVPcmRlclByb3BlcnRpZXM6IGZ1bmN0aW9uIGRlbGV0ZU9yZGVyUHJvcGVydGllcyhpZCkgewogICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CgogICAgICB0aGlzLiRjb25maXJtKCfmianlsZXlsZ7mgKfliKDpmaTlkI7vvIzkuI3lj6/mgaLlpI0sIOaYr+WQpue7p+e7rT8nLCAn5o+Q56S6JywgewogICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn56Gu5a6aJywKICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAn5Y+W5raIJywKICAgICAgICB0eXBlOiAnd2FybmluZycKICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgb3JkZXJQcm9wZXJ0eS5kZWwoaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAvLyDph43mlrDojrflj5bmlbDmja4KICAgICAgICAgIF90aGlzMTEuZ2V0RGF0YXMoKTsKCiAgICAgICAgICBfdGhpczExLmdldE9yZGVyUHJvcGVydGllcygpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWplY3QpIHt9KTsKICAgICAgfSk7CiAgICB9LAogICAgaGFuZGxlRXhwb3J0OiBmdW5jdGlvbiBoYW5kbGVFeHBvcnQoKSB7CiAgICAgIHZhciBfdGhpczEyID0gdGhpczsKCiAgICAgIHRoaXMubG9hZGluZy5leHBvcnQgPSB0cnVlOwogICAgICBvcmRlci5leHBvcnRFeGNlbCh0aGlzLnF1ZXJ5LCB0aGlzLnBhZ2UsIHRoaXMuc29ydCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtyZXNwb25zZV0pOwogICAgICAgIHZhciBmaWxlTmFtZSA9ICforqLljZUueGxzJzsKICAgICAgICB2YXIgZWxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CgogICAgICAgIGVsaW5rLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoZWxpbmsuaHJlZik7CiAgICAgICAgfTsKCiAgICAgICAgZWxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTsKICAgICAgICBlbGluay5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIGVsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxpbmspOwogICAgICAgIGVsaW5rLmNsaWNrKCk7CiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGluayk7CiAgICAgICAgX3RoaXMxMi5sb2FkaW5nLmV4cG9ydCA9IGZhbHNlOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVqZWN0KSB7CiAgICAgICAgX3RoaXMxMi5sb2FkaW5nLmV4cG9ydCA9IGZhbHNlOwogICAgICB9KTsKICAgIH0KICB9Cn07"},null]}