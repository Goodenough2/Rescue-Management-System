{"remainingRequest":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\src\\views\\store-manage\\vessel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\src\\views\\store-manage\\vessel.vue","mtime":1596434369024},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Neal Wang\\IdeaProjects\\mingxin_web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}